
// what takes from stack=> take(0)  what return onto stack=> returns(0)
/* Interface */
#define function updateHorseNumber(uint256) nonpayable returns()
#define function readNumberOfHorses() view returns(uint256) 

#define constant NUMBER_OF_HORSES_STORAGE_SLOT= FREE_STORAGE_POINTER() // 0 -> so currently open storage slot is 0
#define macro MAIN()=takes(0) returns(0) {
   //stack image: TOP [ ] BOTTOM -> 1 WORD means 32 bytes size
   push0 0x00 //PUSH0 stack:[0]
         //0x02 //PUSH1 stack:[2,0]
   calldataload // stack:[calldata(32)]  
    //how do we cut down the calldata to just get the function selector?
    push2 0xe0  // stack:[0xe0,calldata(32)]
    shr         // stack:[func-selector]

    //now jump-> function data associated with the selector
    // updateHorseNumber(uint256) = 0xcdfead2e
    // readNumberOfHorses() =       0xe026c017
    dup1                                 // stack:[func-selector,func-selector]
    __FUNC_SIG(updateHorseNumber)       // stack:[0xcdfead2e,func-selector,func-selector]
    eq                                 // stack:[true_if_func_selector_matches,func-selector]
    //jump to updatehorsenumber code if it's true below code "updateJump" pushes the PC(program counter) into stack
    //so if eq opcode returns true then it jumps to that program location which resides in "updateJump:"
    updateJump                     // stack:[updateHorseNumberProgramCounter,true/false,func-selector]
    jumpi

    // readnumberofhorses ->0xe026c017
    __FUNC_SIG(readNumberOfHorses)  // stack:[0xe026c017,func_selector]
    eq                             // stack:[true_if_func_selector_matches]
    readnumberofhorses
    jumpi
    
    0x0 0x0 revert            //if no valid jump destination just revert with no info...
    updateJump:
        SET_NUMBER_OF_HORSES()
    readnumberofhorses:
        READNUMBEROFHORSES()
}

#define macro SET_NUMBER_OF_HORSES()= takes(0) returns(0) {
         //get the value to store from calldata
         0x04                               // stack:[4] =>push 4 bytes for func_selector removal
         calldataload                       //[input]
         //give it a storage slot
         [NUMBER_OF_HORSES_STORAGE_SLOT]   //stack:[NUMBER_OF_HORSES_STORAGE_SLOT,input]
         //sstore opcode
         sstore  // sstore opcode will consume slot and value from stack
         // stop the transaction with success!
         stop   // stack:[func_selector,0]
}

#define macro READNUMBEROFHORSES()= takes(0) returns(0){
           
           [NUMBER_OF_HORSES_STORAGE_SLOT]   // stack:[NUMBER_OF_HORSES_STORAGE_SLOT]
           sload                             // stack:[value]
           0x00                              // stack:[0,value]
           mstore                            // stack:[]        //Memory:[value]
           //0x20-> 32 bytes -1 Word
           0x20                              // stack:[20]      //Memory:[value]-->preperation for returning value from memory
           0x00                              // stack:[0,20]    //Memory:[value]-->preperation for returning value from memory
           return

}
